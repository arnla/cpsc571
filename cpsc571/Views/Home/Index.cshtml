@{
    ViewBag.Title = "CPSC571";
}

<form id="queryForm">
    <div class="form-group">
        <label for="inputQuery">Input Query</label>
        @*<input type="text" class="form-control form-control-lg" id="inputQuery" aria-describedby="queryHelp" placeholder="Enter Query">*@
        @Html.TextBox("InputQuery")
        <small id="queryHelp" class="form-text text-muted">Enter a word or query you wish to find words related to.</small>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<div id="chart">
    <svg>
        
    </svg>
</div>

<div>
    <button id="stopStream">Stop application</button>
    <ul id="tweetsList">
        @*@foreach (var t in Model.ToList())
        {
            <li>@t.FullText</li>
        }*@
    </ul>
</div>

<script type="text/javascript">

    let jsonPath = "@Request.Url.Scheme" + "://" + "@Request.Url.Authority" + 
    "@Request.ApplicationPath.TrimEnd('/')" + "/" + "Data_Files/tweets.json";

    let diameter = 960,
        format = d3.format(",d"),
        color = d3.scaleOrdinal(d3.schemeCategory20c);

    let bubble = d3.pack()
        .size([diameter, diameter])
        .padding(1.5);

    let svg = d3.select("body").append("svg")
        .attr("width", diameter)
        .attr("height", diameter)
        .attr("class", "bubble");

    function classes(root) {
        let dataset = [];
        for (let node in root) {
            dataset.push({keyword: root[node].Keyword, count: root[node].Count})
        }
        return { children: dataset }
    }

    d3.select(self.frameElement).style("height", diameter + "px");

    //var data = [80, 120, 60, 150, 200];
    //var barHeight = 20;
    //var bar = d3.select('svg')
    //          .selectAll('rect')
    //          .data(data)
    //          .enter()
    //          .append('rect')
    //          .attr('width', function(d) {  return d; })
    //          .attr('height', barHeight - 1)
    //          .attr('transform', function(d, i) {
    //            return "translate(0," + i * barHeight + ")";
    //          });


    $(document).ready(function () {
        $('#queryForm').submit(function (e) {
            e.preventDefault();
            if ($('#InputQuery').val() === '') {
                alert("Query must not be empty!");
                return false;
            }

            $.ajax({
                url: '@Url.Action("SubmitForm")',
                type: 'POST',
                data: $('#queryForm').serialize(),
                success: function () {
                    setInterval(function () {
                        updateTweetsJson()
                    }, 10000)
                },
                error: function () {
                    alert('error');
                }
            });
        });

        function updateGraph() {
            svg.selectAll("*").remove();
            d3.json(jsonPath, function (error, data) {
                if (error) throw error;

                let root = d3.hierarchy(classes(data))
                    .sum(function (d) { return d.count; })
                    .sort(function (a, b) { return b.count - a.count; });

                bubble(root);
                let node = svg.selectAll(".node")
                    .data(root.children)
                    .enter().append("g")
                    .attr("class", "node")
                    .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

                node.append("title")
                    .text(function (d) { return d.data.keyword + ": " + format(d.data.count); });

                node.append("circle")
                    .attr("r", function (d) { return d.r; })
                    .style("fill", function (d) {
                        return color(d.data.keyword);
                    });

                node.append("text")
                    .attr("dy", ".3em")
                    .style("text-anchor", "middle")
                    .text(function (d) { return d.data.keyword; });
            });
        }

        function updateTweetsJson() {
            $.ajax({
                url: '@Url.Action("GetTweets")',
                type: 'POST',
                success: function () {
                    updateGraph();
                },
                error: function () {
                    alert('error updating tweets json');
                }
            });
        }

        $('#stopStream').click(function () {
            location.href = '@Url.Action("Stop", "Home")';
        });
    });


</script>